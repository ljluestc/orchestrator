name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [probe, app]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.component }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.orchestrator.local
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update image tags in ArgoCD
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Update image tags in helm values-dev.yaml
        sed -i "s/tag: .*/tag: ${GITHUB_SHA::7}/" helm/orchestrator/values-dev.yaml

        git add helm/orchestrator/values-dev.yaml
        git commit -m "Update dev images to ${GITHUB_SHA::7}"
        git push

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.orchestrator.local
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update image tags in ArgoCD
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Update image tags in helm values-staging.yaml
        sed -i "s/tag: .*/tag: ${GITHUB_SHA::7}/" helm/orchestrator/values-staging.yaml

        git add helm/orchestrator/values-staging.yaml
        git commit -m "Update staging images to ${GITHUB_SHA::7}"
        git push

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://orchestrator.local
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update image tags in ArgoCD
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}

        # Update image tags in helm values-prod.yaml
        sed -i "s/tag: .*/tag: ${VERSION}/" helm/orchestrator/values-prod.yaml

        git add helm/orchestrator/values-prod.yaml
        git commit -m "Update prod images to ${VERSION}"
        git push
