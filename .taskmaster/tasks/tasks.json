{
  "master": {
    "tasks": [
      {
        "id": "21",
        "title": "Implement App Backend Server with Report Aggregation",
        "description": "Create the central app backend server that receives reports from probes, aggregates data, and provides REST/WebSocket APIs for the UI",
        "details": "Build a Go HTTP server using gin-gonic or chi router that handles: 1) REST API endpoints for probe registration, report submission, and data queries 2) WebSocket server for real-time UI updates 3) Report aggregation engine that merges probe data into topology views 4) Time-series metrics storage with 15-second resolution 5) Background cleanup of old data. Structure: cmd/app/main.go, pkg/app/{server.go, handlers.go, aggregator.go, websocket.go}, internal/storage/. Use existing probe client patterns for configuration and structure.",
        "testStrategy": "Unit tests for handlers, integration tests for report aggregation, WebSocket connection tests, load testing with multiple concurrent probes",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": [],
        "updatedAt": "2025-10-05T20:47:05.902Z"
      },
      {
        "id": "22",
        "title": "Enhance Probe Agent with Kubernetes Integration",
        "description": "Extend the existing probe agent to collect Kubernetes resources (pods, services, deployments, namespaces) and their relationships",
        "details": "Add kubernetes collector to existing probe structure: 1) Create pkg/probe/kubernetes.go with KubernetesCollector struct 2) Use client-go library to connect to K8s API 3) Collect pods, services, deployments, namespaces with labels/annotations 4) Map container IDs to pod names 5) Add K8s data to existing ReportData struct 6) Update probe.go to include kubernetes collector when running in K8s environment. Follow existing collector patterns from docker.go and host.go.",
        "testStrategy": "Unit tests with mock K8s client, integration tests in kind/minikube cluster, verify pod-container mapping accuracy",
        "priority": "high",
        "dependencies": [
          "21"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "23",
        "title": "Develop React-based Web UI with Topology Visualization",
        "description": "Create a modern React frontend with interactive topology graph visualization using D3.js or Cytoscape.js",
        "details": "Build React application: 1) Setup with Vite/Create React App in web/ directory 2) Components: TopologyGraph, NodeDetailsPanel, ViewSelector, SearchBar, FilterPanel 3) Use Cytoscape.js for force-directed graph layout 4) Implement multiple views (Processes, Containers, Hosts, Pods, Services) 5) WebSocket integration for real-time updates 6) Context panel showing node details and metrics 7) Responsive design with CSS-in-JS (styled-components) 8) State management with Redux Toolkit or Zustand",
        "testStrategy": "Component unit tests with React Testing Library, E2E tests with Playwright, visual regression tests, performance tests for large graphs",
        "priority": "high",
        "dependencies": [
          "21"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "24",
        "title": "Implement Time-Series Metrics Storage and API",
        "description": "Create efficient time-series storage for metrics with 15-second resolution and query APIs for sparklines and historical data",
        "details": "Implement metrics storage system: 1) Create pkg/storage/timeseries.go with in-memory storage using ring buffers 2) Store CPU, memory, network I/O metrics per container/host/process 3) Implement retention policies (default 1 hour for 15s resolution) 4) REST API endpoints: /api/v1/metrics/{nodeType}/{nodeId} 5) Background aggregation to generate sparkline data 6) Optional: Integration with Prometheus TSDB for persistence 7) Compression for efficient memory usage",
        "testStrategy": "Performance tests for metric ingestion rates, query response time benchmarks, memory usage profiling, retention policy validation",
        "priority": "medium",
        "dependencies": [
          "21"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "25",
        "title": "Add Container Control and Management Features",
        "description": "Implement container lifecycle management operations (start, stop, pause, restart, remove) through the web UI",
        "details": "Container control system: 1) Add control endpoints to app server: POST /api/v1/containers/{id}/{action} 2) Proxy control commands to appropriate probe agents 3) Add control buttons to UI node details panel 4) Implement WebSocket notifications for operation status 5) Add bulk operations for multiple containers 6) Error handling and user feedback 7) RBAC integration to control access to operations 8) Audit logging for all control actions",
        "testStrategy": "Unit tests for control handlers, integration tests with real containers, permission verification tests, error handling validation",
        "priority": "medium",
        "dependencies": [
          "21",
          "23"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "26",
        "title": "Develop Container Logs Viewer and Terminal Access",
        "description": "Create real-time log streaming and interactive terminal access for containers through the web UI",
        "details": "Log and terminal features: 1) WebSocket-based log streaming from Docker API 2) Terminal component using xterm.js library 3) WebSocket proxy for container exec sessions 4) Log viewer with search, filtering, and export functionality 5) Multiple terminal tabs support 6) Session management and cleanup 7) Security: TTY encryption and session timeout 8) UI components: LogViewer, Terminal, TabManager 9) Backend: pkg/app/logs.go, pkg/app/terminal.go",
        "testStrategy": "Terminal session tests, log streaming performance tests, security validation for exec access, memory leak tests for long sessions",
        "priority": "medium",
        "dependencies": [
          "23",
          "25"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "27",
        "title": "Implement Search and Filtering System",
        "description": "Add comprehensive search and filtering capabilities across all topology entities with saved filter configurations",
        "details": "Search and filter system: 1) Full-text search index for all node metadata 2) Filter API: /api/v1/search?q={query}&filters={json} 3) Filter types: labels, resource type, metrics thresholds, namespace 4) Real-time filtering of topology graph 5) Search component with autocomplete 6) Filter sidebar with checkboxes and sliders 7) Save/load filter configurations 8) Search highlighting in results 9) Backend: pkg/search/indexer.go, pkg/search/filters.go",
        "testStrategy": "Search performance tests with large datasets, filter accuracy validation, UI responsiveness tests, saved configuration persistence tests",
        "priority": "low",
        "dependencies": [
          "23",
          "24"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "28",
        "title": "Create Plugin Architecture and SDK",
        "description": "Develop extensible plugin system for custom metrics, control actions, and UI components",
        "details": "Plugin system: 1) HTTP-based plugin API specification 2) Plugin registration and discovery in app server 3) Plugin types: metrics, control, reporter 4) Go SDK: pkg/plugin/sdk/ with client library 5) Plugin manifest format (YAML) 6) Hot-reload capability 7) Example plugins: sample-metrics, custom-control 8) Plugin UI integration points 9) Security: plugin sandboxing and validation 10) Documentation and development guide",
        "testStrategy": "Plugin lifecycle tests, SDK functionality validation, hot-reload testing, security boundary verification, example plugin integration tests",
        "priority": "low",
        "dependencies": [
          "21",
          "23"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "29",
        "title": "Enhance Network Topology Discovery and Visualization",
        "description": "Improve network connection mapping with service-to-service communication patterns and traffic flow visualization",
        "details": "Network topology enhancements: 1) Extend existing NetworkCollector to track connection patterns 2) Service discovery and mapping 3) Traffic flow visualization with animated edges 4) Connection strength based on byte volumes 5) Network metrics: latency, bandwidth, error rates 6) Service mesh integration (future: Istio, Linkerd) 7) Network security group visualization 8) Protocol analysis (HTTP, gRPC, TCP, UDP) 9) Edge bundling for complex topologies",
        "testStrategy": "Network discovery accuracy tests, performance with high-connection environments, visualization rendering tests, service mapping validation",
        "priority": "medium",
        "dependencies": [
          "22",
          "23"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "30",
        "title": "Implement Deployment Packaging and Documentation",
        "description": "Create comprehensive deployment options including Kubernetes manifests, Docker Compose, Helm charts, and documentation",
        "details": "Deployment and documentation: 1) Kubernetes manifests: DaemonSet for probe, Deployment for app, Service/Ingress for UI 2) Helm chart with configurable values 3) Docker Compose for local development 4) Multi-architecture container images (amd64, arm64) 5) Installation scripts and Makefile 6) Comprehensive documentation: README.md, docs/installation.md, docs/configuration.md, docs/api.md 7) Architecture diagrams and screenshots 8) Troubleshooting guide 9) Security best practices guide",
        "testStrategy": "Deployment validation in different K8s versions, Helm chart testing, Docker Compose validation, documentation accuracy verification, installation script testing",
        "priority": "medium",
        "dependencies": [
          "21",
          "22",
          "23"
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastModified": "2025-10-05T20:47:05.902Z",
      "taskCount": 10,
      "completedCount": 0,
      "tags": [
        "master"
      ]
    }
  }
}