apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: monitoring-app
  namespace: orchestrator
  labels:
    app: monitoring-app
    component: monitoring
spec:
  replicas: 3
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: monitoring-app
  template:
    metadata:
      labels:
        app: monitoring-app
        component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: monitoring-app
      containers:
      - name: app
        image: orchestrator-app:latest
        ports:
        - name: http
          containerPort: 8080
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10

  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
      steps:
      - setWeight: 10
      - pause: {duration: 5m}
      - analysis:
          templates:
          - templateName: monitoring-app-success-rate
          - templateName: monitoring-app-latency
          args:
          - name: service-name
            value: monitoring-app
      - setWeight: 25
      - pause: {duration: 5m}
      - setWeight: 50
      - pause: {duration: 10m}
      - analysis:
          templates:
          - templateName: monitoring-app-success-rate
          - templateName: monitoring-app-latency
      - setWeight: 75
      - pause: {duration: 5m}
      - setWeight: 100

      trafficRouting:
        nginx:
          stableIngress: monitoring-app-stable
          annotationPrefix: nginx.ingress.kubernetes.io
          additionalIngressAnnotations:
            canary-by-header: X-Canary

      analysis:
        successfulRunHistoryLimit: 5
        unsuccessfulRunHistoryLimit: 5
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: monitoring-app-success-rate
  namespace: orchestrator
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    interval: 1m
    count: 5
    successCondition: result >= 0.95
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus-server:9090
        query: |
          sum(rate(
            http_requests_total{
              service="{{args.service-name}}",
              status!~"5.."
            }[5m]
          ))
          /
          sum(rate(
            http_requests_total{
              service="{{args.service-name}}"
            }[5m]
          ))
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: monitoring-app-latency
  namespace: orchestrator
spec:
  args:
  - name: service-name
  metrics:
  - name: latency-p95
    interval: 1m
    count: 5
    successCondition: result <= 1000
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus-server:9090
        query: |
          histogram_quantile(0.95,
            sum(rate(
              http_request_duration_seconds_bucket{
                service="{{args.service-name}}"
              }[5m]
            )) by (le)
          ) * 1000
  - name: latency-p99
    interval: 1m
    count: 5
    successCondition: result <= 2000
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus-server:9090
        query: |
          histogram_quantile(0.99,
            sum(rate(
              http_request_duration_seconds_bucket{
                service="{{args.service-name}}"
              }[5m]
            )) by (le)
          ) * 1000
