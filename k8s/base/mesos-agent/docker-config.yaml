---
# Docker Containerizer Configuration for Mesos Agent
apiVersion: v1
kind: ConfigMap
metadata:
  name: mesos-agent-docker-config
  namespace: orchestrator
data:
  docker-containerizer.json: |
    {
      "containerizers": ["docker", "mesos"],
      "docker": {
        "enabled": true,
        "socket": "/var/run/docker.sock",
        "config_file": "/etc/docker/daemon.json",
        "kill_timeout": "30s",
        "remove_delay": "6h",
        "volume_checkpoint_dir": "/var/lib/mesos/docker/volumes"
      },
      "image_providers": ["docker"],
      "image_provisioner_backend": "overlay",
      "isolation": "docker/runtime,filesystem/linux,cgroups/cpu,cgroups/mem",
      "docker_store_dir": "/var/lib/mesos/store/docker",
      "docker_registry": {
        "default": "docker.io",
        "insecure_registries": [],
        "registry_mirrors": [
          "https://registry-mirror.internal.cluster.local"
        ]
      },
      "image_gc_config": {
        "enabled": true,
        "image_disk_headroom": 0.1,
        "image_disk_watch_interval": "5m",
        "image_gc_delay": "24h"
      },
      "resource_estimator": "fixed",
      "qos_controller": "load",
      "executor_registration_timeout": "5min",
      "executor_shutdown_grace_period": "30s",
      "recovery_timeout": "15min",
      "strict": true,
      "switch_user": false,
      "systemd_enable_support": true,
      "cgroups_root": "mesos",
      "cgroups_hierarchy": "/sys/fs/cgroup",
      "perf_events": "cycles,instructions,cache-references,cache-misses",
      "perf_interval": "60s",
      "perf_duration": "10s"
    }

  daemon.json: |
    {
      "storage-driver": "overlay2",
      "storage-opts": [
        "overlay2.override_kernel_check=true"
      ],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m",
        "max-file": "5"
      },
      "registry-mirrors": [
        "https://registry-mirror.internal.cluster.local"
      ],
      "insecure-registries": [],
      "debug": false,
      "experimental": false,
      "metrics-addr": "0.0.0.0:9323",
      "max-concurrent-downloads": 10,
      "max-concurrent-uploads": 10,
      "default-shm-size": "64M",
      "userland-proxy": false,
      "live-restore": true,
      "default-ulimits": {
        "nofile": {
          "Name": "nofile",
          "Hard": 64000,
          "Soft": 64000
        }
      },
      "default-runtime": "runc",
      "runtimes": {
        "nvidia": {
          "path": "/usr/bin/nvidia-container-runtime",
          "runtimeArgs": []
        }
      }
    }

  registry-credentials.json: |
    {
      "auths": {
        "docker.io": {
          "username": "",
          "password": "",
          "email": "",
          "auth": ""
        },
        "registry.internal.cluster.local": {
          "username": "mesos-agent",
          "password": "",
          "email": "admin@cluster.local",
          "auth": ""
        },
        "gcr.io": {
          "username": "_json_key",
          "password": "",
          "email": "not@val.id",
          "auth": ""
        }
      }
    }
---
# Docker registry mirror deployment (internal cache)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-mirror
  namespace: orchestrator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: registry-mirror
  template:
    metadata:
      labels:
        app: registry-mirror
    spec:
      containers:
      - name: registry
        image: registry:2.8
        ports:
        - containerPort: 5000
        env:
        - name: REGISTRY_HTTP_ADDR
          value: "0.0.0.0:5000"
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: "/var/lib/registry"
        - name: REGISTRY_PROXY_REMOTEURL
          value: "https://registry-1.docker.io"
        - name: REGISTRY_STORAGE_DELETE_ENABLED
          value: "true"
        volumeMounts:
        - name: registry-storage
          mountPath: /var/lib/registry
        - name: config
          mountPath: /etc/docker/registry
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: registry-storage
        persistentVolumeClaim:
          claimName: registry-mirror-pvc
      - name: config
        configMap:
          name: registry-mirror-config
---
apiVersion: v1
kind: Service
metadata:
  name: registry-mirror
  namespace: orchestrator
spec:
  selector:
    app: registry-mirror
  ports:
  - port: 5000
    targetPort: 5000
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: registry-mirror-pvc
  namespace: orchestrator
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-mirror-config
  namespace: orchestrator
data:
  config.yml: |
    version: 0.1
    log:
      level: info
      formatter: text
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
      delete:
        enabled: true
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    proxy:
      remoteurl: https://registry-1.docker.io
      ttl: 168h  # 7 days
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
---
# Secret for registry authentication (placeholder)
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: orchestrator
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K  # Empty JSON object base64 encoded
---
# Image Puller DaemonSet for pre-caching critical images
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: image-puller
  namespace: orchestrator
spec:
  selector:
    matchLabels:
      app: image-puller
  template:
    metadata:
      labels:
        app: image-puller
    spec:
      initContainers:
      # Pre-pull critical images to all nodes
      - name: pull-ubuntu
        image: ubuntu:22.04
        command: ["echo", "Image cached"]
      - name: pull-alpine
        image: alpine:3.18
        command: ["echo", "Image cached"]
      - name: pull-nginx
        image: nginx:1.25
        command: ["echo", "Image cached"]
      - name: pull-python
        image: python:3.11-slim
        command: ["echo", "Image cached"]
      - name: pull-node
        image: node:18-alpine
        command: ["echo", "Image cached"]
      containers:
      - name: pause
        image: gcr.io/google_containers/pause:3.1
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
---
# HorizontalPodAutoscaler for registry mirror
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: registry-mirror-hpa
  namespace: orchestrator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: registry-mirror
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max
